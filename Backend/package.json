// ==============================
// server.js — StealthText API
// ==============================

// --- Imports
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const sqlite3 = require("sqlite3").verbose();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// --- Init
const app = express();
const db = new sqlite3.Database("./db.sqlite");

// --- Middlewares
app.use(cors({
  origin: true,
  methods: ["GET", "POST", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
}));
app.options("*", cors());
app.use(express.json());

// --- DB Setup (users table)
db.run(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT UNIQUE,
  password TEXT,
  premium INTEGER DEFAULT 0
)`);

// --- Helpers
function generateToken(user) {
  return jwt.sign(
    { id: user.id, email: user.email, premium: !!user.premium },
    process.env.JWT_SECRET,
    { expiresIn: "7d" }
  );
}
function authMiddleware(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ error: "Non authentifié" });
  const token = authHeader.split(" ")[1];
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ error: "Token invalide" });
    req.user = decoded;
    next();
  });
}

// --- Routes
app.get("/api/health", (req, res) => {
  res.json({ ok: true });
});

// Auth: Signup
app.post("/api/auth/signup", (req, res) => {
  const { email, password } = req.body;
  if (!email || !password)
    return res.status(400).json({ error: "Email et mot de passe requis" });

  const hash = bcrypt.hashSync(password, 10);
  db.run(
    "INSERT INTO users (email, password) VALUES (?, ?)",
    [email, hash],
    function (err) {
      if (err) return res.status(400).json({ error: "Email déjà utilisé" });
      const user = { id: this.lastID, email, premium: 0 };
      const token = generateToken(user);
      res.json({ token, user });
    }
  );
});

// Auth: Login
app.post("/api/auth/login", (req, res) => {
  const { email, password } = req.body;
  db.get("SELECT * FROM users WHERE email = ?", [email], (err, user) => {
    if (err || !user) return res.status(400).json({ error: "Utilisateur non trouvé" });
    if (!bcrypt.compareSync(password, user.password)) {
      return res.status(400).json({ error: "Mot de passe incorrect" });
    }
    const token = generateToken(user);
    res.json({ token, user });
  });
});

// User info
app.get("/api/me", authMiddleware, (req, res) => {
  res.json(req.user);
});

// Convertisseur
app.post("/api/convert", authMiddleware, (req, res) => {
  const { text } = req.body;
  if (!text) return res.status(400).json({ error: "Aucun texte fourni" });

  // Exemple de conversion : remplacer a->а (latin a -> cyrillique)
  const map = { "a": "а", "e": "е", "i": "і", "o": "о", "u": "υ" };
  const result = text.split("").map(ch => map[ch] || map[ch.toLowerCase()] || ch).join("");

  res.json({
    result,
    premium: req.user.premium,
    remaining: req.user.premium ? "∞" : 5
  });
});

// Activer Premium
app.post("/api/premium/activate", authMiddleware, (req, res) => {
  db.run("UPDATE users SET premium = 1 WHERE id = ?", [req.user.id], function (err) {
    if (err) return res.status(500).json({ error: "Erreur interne" });
    res.json({ success: true, user: { ...req.user, premium: 1 } });
  });
});

// --- Start
const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`✅ API running on port ${PORT}`));
